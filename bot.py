import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from database import init_db, get_answer, add_answer, delete_answer, list_questions

TOKEN = "6719594903:AAFCZLrj391woSzJwWAKR_A5ncbfjWTp_cc"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()



async def on_startup():
    await init_db()



@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–µ. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã!")



@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer("üîπ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
                         "üîπ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç: `/add –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç`\n"
                         "üîπ –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å: `/delete –í–æ–ø—Ä–æ—Å`\n"
                         "üîπ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã: `/list`")



@dp.message(Command("add"))
async def add_multiple_answers_cmd(message: types.Message):
    text = message.text.replace("/add", "").strip()

    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n"
                             "/add\n"
                             "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Å–º–µ—Å–∏—Ç–µ–ª—å? - –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ç–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è.\n"
                             "–ö–∞–∫–∏–µ —Ç—Ä—É–±—ã –ª—É—á—à–µ? - –ü–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω–æ–≤—ã–µ –∏–ª–∏ –º–µ—Ç–∞–ª–ª–æ–ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ.")
        return

    lines = text.split("\n")
    added_count = 0

    for line in lines:
        if " - " in line:
            question, answer = line.split(" - ", 1)
            question = question.strip().lower()
            answer = answer.strip()

            await add_answer(question, answer)
            added_count += 1

    if added_count > 0:
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä '–≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—Ç'.")



@dp.message(Command("delete"))
async def delete_answer_cmd(message: types.Message):
    question = message.text.replace("/delete", "").strip().lower()

    if not question:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n`/delete –í–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å`")
        return

    await delete_answer(question)
    await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å '{question}' —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã!")



@dp.message(Command("list"))
async def list_questions_cmd(message: types.Message):
    questions = await list_questions()

    if questions:
        text = "üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n" + "\n".join(f"üîπ {q}" for q in questions)
        await message.answer(text)
    else:
        await message.answer("üîπ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")



@dp.message()
async def reply_message(message: types.Message):
    question = message.text.lower().strip()
    answer = await get_answer(question)

    if answer:
        await message.answer(answer)
    else:
        await message.answer("‚ùå –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n"
                             "–î–æ–±–∞–≤—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/add –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç`")



async def main():
    await on_startup()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())